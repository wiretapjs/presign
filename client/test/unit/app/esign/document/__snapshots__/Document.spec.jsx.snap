// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Esign Document View it should render Esign Document View 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <View>
    <styled.div>
      <styled.div>
        <Header
          leftPadding="90px"
        />
      </styled.div>
      <styled.div>
        <styled.h1>
           Let's sign your policy documents 
        </styled.h1>
      </styled.div>
      <styled.div>
        <CantSeeDocsLinkComponent />
        <HelpLink />
      </styled.div>
      <styled.div>
        <RegistrationLoading />
      </styled.div>
      <Footer />
    </styled.div>
  </View>,
  "nodes": Array [
    <View>
      <styled.div>
        <styled.div>
          <Header
            leftPadding="90px"
          />
        </styled.div>
        <styled.div>
          <styled.h1>
             Let's sign your policy documents 
          </styled.h1>
        </styled.div>
        <styled.div>
          <CantSeeDocsLinkComponent />
          <HelpLink />
        </styled.div>
        <styled.div>
          <RegistrationLoading />
        </styled.div>
        <Footer />
      </styled.div>
    </View>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 0,
      "_context": Object {},
      "_currentElement": <Document
        history={
          Object {
            "push": [Function],
          }
        }
      />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": Document {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "history": Object {
            "push": [Function],
          },
        },
        "refs": Object {},
        "state": Object {
          "esignatureUrl": "",
          "policyNumber": "",
          "showErrorMessage": false,
          "showLoading": true,
        },
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <View>
          <styled.div>
            <styled.div>
              <Header
                leftPadding="90px"
              />
            </styled.div>
            <styled.div>
              <styled.h1>
                 Let's sign your policy documents 
              </styled.h1>
            </styled.div>
            <styled.div>
              <CantSeeDocsLinkComponent />
              <HelpLink />
            </styled.div>
            <styled.div>
              <RegistrationLoading />
            </styled.div>
            <Footer />
          </styled.div>
        </View>,
        "_debugID": 2,
        "_renderedOutput": <View>
          <styled.div>
            <styled.div>
              <Header
                leftPadding="90px"
              />
            </styled.div>
            <styled.div>
              <styled.h1>
                 Let's sign your policy documents 
              </styled.h1>
            </styled.div>
            <styled.div>
              <CantSeeDocsLinkComponent />
              <HelpLink />
            </styled.div>
            <styled.div>
              <RegistrationLoading />
            </styled.div>
            <Footer />
          </styled.div>
        </View>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <Document
    history={
      Object {
        "push": [Function],
      }
    }
  />,
}
`;
